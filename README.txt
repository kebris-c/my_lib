Para implementar las librer√≠as personalizadas en un entorno con unas rutas que pueda usar siempre debo seguir los siguientes pasos:

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Si quieres hacer que tu librer√≠a sea accesible globalmente sin usar sudo, la mejor opci√≥n es instalarla en tu directorio de usuario y configurar tu entorno para que la encuentre autom√°ticamente.
üìå M√©todo: Instalar la librer√≠a en $HOME/.local
 Este m√©todo hace que cualquier programa pueda usar #include "my_lib.h" sin mover archivos manualmente.

1Ô∏è‚É£ Crear estructura de instalaci√≥n
 mkdir -p $HOME/.local/include   # Para headers (.h)
 mkdir -p $HOME/.local/lib       # Para librer√≠as (.a y .so)
2Ô∏è‚É£ Copiar los archivos
 cp my_lib.h $HOME/.local/include/
 gcc -shared -o $HOME/.local/lib/libmy_lib.so -fPIC my_lib.c
3Ô∏è‚É£ Configurar variables de entorno
 A√±ade estas l√≠neas a tu ~/.bashrc o ~/.zshrc para que sean permanentes:

 export C_INCLUDE_PATH=$HOME/.local/include:$C_INCLUDE_PATH
 export LIBRARY_PATH=$HOME/.local/lib:$LIBRARY_PATH
 export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH

 Despu√©s, aplica los cambios:
 
 source ~/.bashrc      /or/      source ~/.zshrc (si usas zsh)

üöÄ Usarlo en cualquier proyecto
 Ahora, cuando compiles cualquier programa, simplemente haz:

 gcc -o my_program main.c -lmy_lib
üîπ Sin necesidad de -I ni -L, porque el compilador ya sabe d√≥nde buscar.
üîπ Funciona para cualquier proyecto sin copiar archivos.

üî• Ventajas de este m√©todo
‚úÖ No necesita sudo
‚úÖ Accesible en cualquier proyecto sin mover archivos
‚úÖ Persistente, incluso tras reiniciar
‚úÖ Compatible con librer√≠as est√°ticas (.a) y din√°micas (.so)

üí° Ahora puedes usar my_lib.h y libmy_lib.so globalmente sin complicaciones. üöÄ


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Si ya usaste el m√©todo de instalaci√≥n en ~/.local, aqu√≠ est√° lo que debes incluir y c√≥mo:

üìÇ Contenido de ~/.local/include/
 Este directorio debe contener solo los headers (.h) de tu librer√≠a.

üìå Pasos:

 cp my_lib.h $HOME/.local/include/
üìå Ejemplo de my_lib.h:

 #ifndef MY_LIB_H
 #define MY_LIB_H

 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <stddef.h>
 #include <fcntl.h>
 #include <string.h>

 // Prototipos de las funciones
 int ft_atoi(char *str);
 int ft_strlen(char *str);
 void ft_putchar(char c);
 void ft_putnbr(int nbr);
 void ft_swap(int *a, int *b);

 #endif
üîπ NO debe contener implementaciones de funciones, solo prototipos y #include necesarios.

üìÇ Contenido de ~/.local/lib/
 Aqu√≠ deben estar las compilaciones de la librer√≠a en forma de archivo est√°tico (.a) o din√°mico (.so).

üìå Opci√≥n 1: Librer√≠a Est√°tica (.a)
 gcc -c my_lib.c -o my_lib.o
 ar rcs $HOME/.local/lib/libmy_lib.a my_lib.o
 Esto crea libmy_lib.a, que se enlaza en la compilaci√≥n.

üìå Opci√≥n 2: Librer√≠a Din√°mica (.so)
 gcc -shared -o $HOME/.local/lib/libmy_lib.so -fPIC my_lib.c
 Esto crea libmy_lib.so, que se carga en tiempo de ejecuci√≥n.

üìå Configuraci√≥n Final
 Para que el compilador encuentre la librer√≠a autom√°ticamente, aseg√∫rate de tener estas variables en ~/.bashrc o ~/.zshrc:

 export C_INCLUDE_PATH=$HOME/.local/include:$C_INCLUDE_PATH
 export LIBRARY_PATH=$HOME/.local/lib:$LIBRARY_PATH
 export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
 
 Y aplica los cambios:

 source ~/.bashrc  # O source ~/.zshrc si usas Zsh

üöÄ C√≥mo usar la librer√≠a en un proyecto
 1Ô∏è‚É£ Enlazar la librer√≠a est√°tica (.a):

 gcc -o my_program main.c -lmy_lib
 2Ô∏è‚É£ Enlazar la librer√≠a din√°mica (.so):

 gcc -o my_program main.c -lmy_lib
 (Si da error al ejecutar, recarga LD_LIBRARY_PATH con export LD_LIBRARY_PATH=$HOME/.local/lib).

üî• Ventajas
‚úÖ No necesitas copiar archivos a cada proyecto
‚úÖ No usas sudo
‚úÖ Compatible con cualquier compilaci√≥n (gcc, clang, etc.)
‚úÖ Puedes actualizar la librer√≠a sin modificar cada proyecto

Ahora, cualquier c√≥digo en C podr√° incluir #include "my_lib.h" y enlazar con -lmy_lib sin preocuparse por rutas. üöÄ

üìå						Makefile Description:
 This Makefile is designed to work with a script named libft_creator.sh
 that sets up the project. The script should create the necessary files
 and directories, and the Makefile will handle the compilation of the
 source files into a static library named libft.a.
 The check_creator target ensures that the script is run only once,
 and the .creator_done file is used to track whether the script has
 already been executed.
 The script should be placed in the same directory as this Makefile.
 The script should also handle the creation of the include directory
 and the srcs directory, and any other necessary setup for the project.
 The script should also ensure that the source files are placed in the
 srcs directory and the header files are placed in the include directory.
 The script should also ensure that the Makefile is placed in the root
 directory of the project.
							How to use it:
 Make sure the libft_creator.sh file is in the same directory as the Makefile.
 Run make as usual. If the script has not been executed before,
 it will run automatically. If you need to force the script to run again,
 use make fclean followed by make.
